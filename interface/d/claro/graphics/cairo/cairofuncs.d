/**
 * This module contains all the "standard" cairo function calls,
 * as well as functions relating to PNG functionality.
 *
 * This file is automatically generated; do not directly modify.
 *
 * Authors: Daniel Keep
 * Copyright: 2006, Daniel Keep
 * License: BSD v2 (http://www.opensource.org/licenses/bsd-license.php).
 */
/*
 * Copyright Â© 2006 Daniel Keep
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 * * Neither the name of this software, nor the names of its contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
module claro.graphics.cairo.cairofuncs;

private import claro.graphics.cairo.cairotypes;

extern (C)
{
	void cairo_matrix_init_identity(cairo_matrix_t* matrix);
	cairo_antialias_t cairo_font_options_get_antialias(cairo_font_options_t* options);
	void cairo_arc_negative(cairo_t* cr, double xc, double yc, double radius, double angle1, double angle2);
	void cairo_device_to_user_distance(cairo_t* cr, double* dx, double* dy);
	void cairo_set_matrix(cairo_t* cr, cairo_matrix_t* matrix);
	void cairo_new_path(cairo_t* cr);
	void cairo_surface_finish(cairo_surface_t* surface);
	cairo_t* cairo_reference(cairo_t* cr);
	void* cairo_surface_get_user_data(cairo_surface_t* surface, cairo_user_data_key_t* key);
	void cairo_rectangle(cairo_t* cr, double x, double y, double width, double height);
	cairo_scaled_font_t* cairo_scaled_font_reference(cairo_scaled_font_t* scaled_font);
	char* cairo_status_to_string(cairo_status_t status);
	void cairo_mask(cairo_t* cr, cairo_pattern_t* pattern);
	void cairo_get_font_matrix(cairo_t* cr, cairo_matrix_t* matrix);
	cairo_surface_t* cairo_surface_reference(cairo_surface_t* surface);
	void cairo_rotate(cairo_t* cr, double angle);
	void cairo_show_text(cairo_t* cr, char* utf8);
	cairo_pattern_t* cairo_pattern_create_rgba(double red, double green, double blue, double alpha);
	cairo_font_face_t* cairo_font_face_reference(cairo_font_face_t* font_face);
	void cairo_reset_clip(cairo_t* cr);
	cairo_font_options_t* cairo_font_options_create();
	void cairo_matrix_scale(cairo_matrix_t* matrix, double sx, double sy);
	void cairo_set_line_width(cairo_t* cr, double width);
	void cairo_pattern_destroy(cairo_pattern_t* pattern);
	cairo_pattern_t* cairo_get_source(cairo_t* cr);
	void cairo_surface_flush(cairo_surface_t* surface);
	void cairo_font_options_set_antialias(cairo_font_options_t* options, cairo_antialias_t antialias);
	void cairo_font_options_set_subpixel_order(cairo_font_options_t* options, cairo_subpixel_order_t subpixel_order);
	void cairo_font_extents(cairo_t* cr, cairo_font_extents_t* extents);
	void cairo_scaled_font_destroy(cairo_scaled_font_t* scaled_font);
	void cairo_pattern_get_matrix(cairo_pattern_t* pattern, cairo_matrix_t* matrix);
	cairo_surface_t* cairo_image_surface_create_for_data(ubyte* data, cairo_format_t format, int width, int height, int stride);
	void cairo_pattern_set_matrix(cairo_pattern_t* pattern, cairo_matrix_t* matrix);
	char* cairo_version_string();
	void cairo_set_source(cairo_t* cr, cairo_pattern_t* source);
	void cairo_surface_mark_dirty_rectangle(cairo_surface_t* surface, int x, int y, int width, int height);
	void cairo_translate(cairo_t* cr, double tx, double ty);
	void cairo_scaled_font_glyph_extents(cairo_scaled_font_t* scaled_font, cairo_glyph_t* glyphs, int num_glyphs, cairo_text_extents_t* extents);
	void cairo_set_tolerance(cairo_t* cr, double tolerance);
	void cairo_surface_set_device_offset(cairo_surface_t* surface, double x_offset, double y_offset);
	void cairo_set_line_cap(cairo_t* cr, cairo_line_cap_t line_width);
	cairo_bool_t cairo_stroke_extents(cairo_t* cr, double* x1, double* y1, double* x2, double* y2);
	void cairo_glyph_path(cairo_t* cr, cairo_glyph_t* glyphs, int num_glyphs);
	void cairo_scaled_font_extents(cairo_scaled_font_t* scaled_font, cairo_font_extents_t* extents);
	void cairo_show_page(cairo_t* cr);
	cairo_bool_t cairo_in_stroke(cairo_t* cr, double x, double y);
	void cairo_get_font_options(cairo_t* cr, cairo_font_options_t* options);
	void cairo_pattern_set_filter(cairo_pattern_t* pattern, cairo_filter_t filter);
	void cairo_copy_page(cairo_t* cr);
	void cairo_set_source_surface(cairo_t* cr, cairo_surface_t* surface, double x, double y);
	cairo_hint_style_t cairo_font_options_get_hint_style(cairo_font_options_t* options);
	void cairo_set_source_rgb(cairo_t* cr, double red, double green, double blue);
	void cairo_matrix_init_rotate(cairo_matrix_t* matrix, double radians);
	void cairo_restore(cairo_t* cr);
	void cairo_set_fill_rule(cairo_t* cr, cairo_fill_rule_t fill_rule);
	void cairo_user_to_device_distance(cairo_t* cr, double* dx, double *dy);
	cairo_hint_metrics_t cairo_font_options_get_hint_metrics(cairo_font_options_t* options);
	int cairo_version();
	cairo_pattern_t* cairo_pattern_create_linear(double x0, double y0, double x1, double y1);
	cairo_status_t cairo_status(cairo_t* cr);
	void cairo_matrix_rotate(cairo_matrix_t* matrix, double radians);
	cairo_antialias_t cairo_get_antialias(cairo_t* cr);
	cairo_bool_t cairo_in_fill(cairo_t* cr, double x, double y);
	cairo_font_options_t* cairo_font_options_copy(cairo_font_options_t* original);
	void cairo_font_options_set_hint_metrics(cairo_font_options_t* options, cairo_hint_metrics_t hint_metrics);
	void cairo_set_dash(cairo_t* cr, double* dashes, int num_dashes, double offset);
	void cairo_text_extents(cairo_t* cr, char* utf8, cairo_text_extents_t* extents);
	cairo_status_t cairo_surface_set_user_data(cairo_surface_t* surface, cairo_user_data_key_t* ket, void* user_data, cairo_destroy_func_t destroy);
	void cairo_font_options_merge(cairo_font_options_t* options, cairo_font_options_t* other);
	void cairo_stroke(cairo_t* cr);
	void cairo_rel_move_to(cairo_t* cr, double dx, double dy);
	cairo_scaled_font_t* cairo_scaled_font_create(cairo_font_face_t* font_face, cairo_matrix_t* font_matrix, cairo_matrix_t* ctm, cairo_font_options_t* options);
	void cairo_pattern_add_color_stop_rgba(cairo_pattern_t* pattern, double offset, double red, double green, double blue, double alpha);
	double cairo_get_line_width(cairo_t* cr);
	void cairo_pattern_add_color_stop_rgb(cairo_pattern_t* pattern, double offset, double red, double green, double blue);
	void cairo_set_font_face(cairo_t* cr, cairo_font_face_t* font_face);
	void cairo_transform(cairo_t* cr, cairo_matrix_t* matrix);
	void cairo_font_options_destroy(cairo_font_options_t* options);
	void cairo_set_miter_limit(cairo_t* cr, double limit);
	void cairo_destroy(cairo_t* cr);
	cairo_path_t* cairo_copy_path_flat(cairo_t* cr);
	cairo_extend_t cairo_pattern_get_extend(cairo_pattern_t* pattern);
	void cairo_append_path(cairo_t* cr, cairo_path_t* path);
	double cairo_get_tolerance(cairo_t* cr);
	void cairo_set_font_matrix(cairo_t* cr, cairo_matrix_t* matrix);
	void cairo_set_line_join(cairo_t* cr, cairo_line_join_t line_join);
	cairo_status_t cairo_font_options_status(cairo_font_options_t* options);
	cairo_subpixel_order_t cairo_font_options_get_subpixel_order(cairo_font_options_t* options);
	void cairo_font_face_destroy(cairo_font_face_t* font_face);
	cairo_pattern_t* cairo_pattern_create_rgb(double red, double green, double blue);
	void cairo_text_path(cairo_t* cr, char* utf8);
	void cairo_pattern_set_extend(cairo_pattern_t* pattern, cairo_extend_t extend);
	void cairo_get_current_point(cairo_t* cr, double* x, double* y);
	void cairo_set_font_options(cairo_t* cr, cairo_font_options_t* options);
	void* cairo_font_face_get_user_data(cairo_font_face_t* font_face, cairo_user_data_key_t* key);
	cairo_status_t cairo_pattern_status(cairo_pattern_t* pattern);
	uint cairo_font_options_hash(cairo_font_options_t* options);
	void cairo_mask_surface(cairo_t* cr, cairo_surface_t* surface, double surface_x, double surface_y);
	void cairo_rel_line_to(cairo_t* cr, double dx, double dy);
	void cairo_matrix_init(cairo_matrix_t* matrix, double xx, double yx, double xy, double yy, double x0, double y0);
	void cairo_device_to_user(cairo_t* cr, double* x, double* y);
	cairo_status_t cairo_scaled_font_status(cairo_scaled_font_t* scaled_font);
	void cairo_fill(cairo_t* cr);
	cairo_line_join_t cairo_get_line_join(cairo_t* cr);
	cairo_path_t* cairo_copy_path(cairo_t* cr);
	cairo_status_t cairo_font_face_set_user_data(cairo_font_face_t* font_face, cairo_user_data_key_t* key, void* user_data, cairo_destroy_func_t destroy);
	void cairo_set_operator(cairo_t* cr, cairo_operator_t op);
	cairo_status_t cairo_font_face_status(cairo_font_face_t* font_face);
	void cairo_matrix_transform_distance(cairo_matrix_t* matrix, double* dx, double* dy);
	void cairo_clip(cairo_t* cr);
	void cairo_matrix_translate(cairo_matrix_t* matrix, double tx, double ty);
	cairo_font_face_t* cairo_get_font_face(cairo_t* cr);
	void cairo_get_matrix(cairo_t* cr, cairo_matrix_t* matrix);
	void cairo_surface_get_font_options(cairo_surface_t* surface, cairo_font_options_t *options);
	void cairo_rel_curve_to(cairo_t* cr, double dx1, double dy1, double dx2, double dy2, double dx3, double dy3);
	cairo_pattern_t* cairo_pattern_create_for_surface(cairo_surface_t* surface);
	void cairo_save(cairo_t* cr);
	void cairo_move_to(cairo_t* cr, double x, double y);
	void cairo_clip_preserve(cairo_t* cr);
	void cairo_set_source_rgba(cairo_t* cr, double red, double green, double blue, double alpha);
	cairo_surface_t* cairo_image_surface_create(cairo_format_t format, int width, int height);
	void cairo_paint(cairo_t* cr);
	void cairo_path_destroy(cairo_path_t* path);
	void cairo_surface_mark_dirty(cairo_surface_t* surface);
	void cairo_line_to(cairo_t* cr, double x, double y);
	void cairo_stroke_preserve(cairo_t* cr);
	void cairo_select_font_face(cairo_t* cr, char* family, cairo_font_slant_t slant, cairo_font_weight_t weight);
	int cairo_image_surface_get_width(cairo_surface_t* surface);
	double cairo_get_miter_limit(cairo_t* cr);
	cairo_line_cap_t cairo_get_line_cap(cairo_t* cr);
	cairo_surface_t* cairo_surface_create_similar(cairo_surface_t* other, cairo_content_t content, int width, int height);
	cairo_filter_t cairo_pattern_get_filter(cairo_pattern_t* pattern);
	void cairo_show_glyphs(cairo_t* cr, cairo_glyph_t* glyphs, int num_glyphs);
	void cairo_matrix_init_scale(cairo_matrix_t* matrix, double sx, double sy);
	void cairo_surface_destroy(cairo_surface_t* surface);
	void cairo_font_options_set_hint_style(cairo_font_options_t* options, cairo_hint_style_t hint_style);
	cairo_status_t cairo_surface_status(cairo_surface_t* surface);
	cairo_bool_t cairo_font_options_equal(cairo_font_options_t* options, cairo_font_options_t* other);
	void cairo_curve_to(cairo_t* cr, double x1, double y1, double x2, double y2, double x3, double y3);
	cairo_t* cairo_create(cairo_surface_t* target);
	void cairo_fill_preserve(cairo_t* cr);
	cairo_pattern_t* cairo_pattern_create_radial(double cx0, double cy0, double radius0, double cx1, double cy1, double radius1);
	cairo_fill_rule_t cairo_get_fill_rule(cairo_t* cr);
	void cairo_paint_with_alpha(cairo_t* cr, double alpha);
	cairo_status_t cairo_matrix_invert(cairo_matrix_t* matrix);
	void cairo_glyph_extents(cairo_t* cr, cairo_glyph_t* glyphs, int num_glyphs, cairo_text_extents_t* extents);
	void cairo_set_antialias(cairo_t* cr, cairo_antialias_t antialias);
	cairo_pattern_t* cairo_pattern_reference(cairo_pattern_t* pattern);
	void cairo_user_to_device(cairo_t* cr, double* x, double* y);
	cairo_bool_t cairo_fill_extents(cairo_t* cr, double* x1, double* y1, double* x2, double* y2);
	void cairo_matrix_transform_point(cairo_matrix_t* matrix, double* x, double* y);
	cairo_surface_t* cairo_get_target(cairo_t* cr);
	cairo_operator_t cairo_get_operator(cairo_t* cr);
	void cairo_set_font_size(cairo_t* cr, double size);
	int cairo_image_surface_get_height(cairo_surface_t* surface);
	void cairo_arc(cairo_t* cr, double xc, double yc, double radius, double angle1, double angle2);
	void cairo_close_path(cairo_t* cr);
	void cairo_matrix_multiply(cairo_matrix_t* result, cairo_matrix_t* a, cairo_matrix_t* b);
	void cairo_identity_matrix(cairo_t* cr);
	void cairo_scale(cairo_t* cr, double sx, double sy);
	void cairo_matrix_init_translate(cairo_matrix_t* matrix, double tx, double ty);
	
	// Dave added this
	cairo_surface_t* cairo_image_surface_create_from_png(char *filename);
}
/* Claro Graphics - an abstraction layer for native UI libraries
 * 
 * $Id$
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * See the LICENSE file for more details.
 */


#define _PLATFORM_INC
#include <claro/graphics.h>
//#include <cairo-quartz.h>
#include "../macosx_cocoa.h"

#include "RBSplitView/RBSplitView.h"
#include "RBSplitView/RBSplitSubview.h"

char splitterDividerBuffer[] = {
	0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 
	0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x08, 
	0x00, 0x00, 0x00, 0x08, 0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 
	0x0f, 0xbe, 0x8b, 0x00, 0x00, 0x00, 0x04, 0x67, 0x41, 0x4d, 
	0x41, 0x00, 0x00, 0xd6, 0xd8, 0xd4, 0x4f, 0x58, 0x32, 0x00, 
	0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6f, 0x66, 
	0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6f, 0x62, 
	0x65, 0x20, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 
	0x64, 0x79, 0x71, 0xc9, 0x65, 0x3c, 0x00, 0x00, 0x00, 0xb2, 
	0x49, 0x44, 0x41, 0x54, 0x78, 0xda, 0x62, 0xfc, 0xff, 0xff, 
	0x3f, 0x03, 0x5e, 0x00, 0x52, 0xb0, 0x6d, 0xdb, 0x36, 0x86, 
	0x84, 0x84, 0x04, 0x79, 0x1e, 0x1e, 0x9e, 0x74, 0x2e, 0x2e, 
	0xae, 0xb4, 0xb0, 0xb0, 0x30, 0x85, 0x15, 0x2b, 0x56, 0x80, 
	0xe5, 0xc0, 0x04, 0x48, 0x52, 0x46, 0x46, 0x66, 0x05, 0x23, 
	0x23, 0xe3, 0x7f, 0x09, 0x09, 0x89, 0xff, 0xae, 0xae, 0xae, 
	0x2b, 0x72, 0x73, 0x73, 0xe5, 0x41, 0x72, 0x2c, 0x20, 0x53, 
	0x80, 0xaa, 0xdd, 0xd9, 0xd8, 0xd8, 0xc2, 0x6d, 0x6c, 0x6c, 
	0x18, 0xac, 0xac, 0xac, 0x18, 0xf8, 0xf8, 0xf8, 0xc2, 0x99, 
	0x99, 0x99, 0xf7, 0x01, 0xa5, 0x66, 0x81, 0x15, 0x00, 0x8d, 
	0x66, 0xb0, 0xb6, 0xb6, 0x66, 0x00, 0xea, 0x62, 0x70, 0x70, 
	0x70, 0x60, 0x78, 0xfe, 0xfc, 0x39, 0xc3, 0xad, 0x5b, 0xb7, 
	0x10, 0x6e, 0x28, 0x2e, 0x2e, 0x56, 0x9c, 0x3f, 0x7f, 0xfe, 
	0x8a, 0xcf, 0x9f, 0x3f, 0xff, 0x87, 0x82, 0x15, 0x2f, 0x5f, 
	0xbe, 0x44, 0x58, 0x01, 0x34, 0xf6, 0xbe, 0x88, 0x88, 0x48, 
	0x19, 0xc8, 0xd8, 0x7f, 0xff, 0xfe, 0x31, 0xdc, 0xbe, 0x7d, 
	0x7b, 0xc7, 0x83, 0x07, 0x0f, 0x1e, 0xb9, 0xbb, 0xbb, 0x33, 
	0x30, 0x12, 0xf2, 0x26, 0x40, 0x80, 0x01, 0x00, 0x74, 0x7f, 
	0x54, 0xdf, 0x7e, 0xf1, 0x9c, 0xed, 0x00, 0x00, 0x00, 0x00, 
	0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82, 
};
int splitterDividerLen = 288;

/* Splitter */

/* ClaroSplitter (subclassed from NSSplitView) */
@interface ClaroSplitter : RBSplitView
{
	object_t *cw;
	splitter_widget_t *sw;
}

/* internal init function */
- (void)setClaroWidget:(widget_t *)widget;

/* notification responders */
- (void)claroResize:(NSNotification *)aNotification;
- (void)claroMove:(NSNotification *)aNotification;
- (void)claroClose:(NSNotification *)aNotification;

/* subclass some functions so we do as expected */
/*- (BOOL)isFlipped;
- (BOOL)isVertical;*/

@end

@implementation ClaroSplitter

- (void)claroResize:(NSNotification *)aNotification
{
	NSRect frame = [self frame];
	widget_set_size( cw, frame.size.width, frame.size.height, 1 );
}

- (void)claroMove:(NSNotification *)aNotification
{
	NSRect frame = [self frame];
	widget_set_position( cw, frame.origin.x, frame.origin.y, 1 );
}

- (void)claroClose:(NSNotification *)aNotification
{
	widget_destroy( cw );
}

- (void)setClaroWidget:(widget_t *)widget
{
	static NSImage *nsi = nil;
	cw = OBJECT(widget);
	sw = (splitter_widget_t *)cw;
	
	if ( nsi == nil )
		nsi = [[NSImage alloc] initWithData:[NSData dataWithBytes:splitterDividerBuffer length:splitterDividerLen]];
	
	[self setVertical: (WIDGET(cw)->flags & cSplitterVertical) ? NO : YES];
	[self setDivider: nsi];
		
	[[NSNotificationCenter defaultCenter] addObserver:self
		selector:@selector(claroClose:) name:NSWindowWillCloseNotification
		object:self];
	
	[[NSNotificationCenter defaultCenter] addObserver:self
		selector:@selector(claroResize:) name:NSWindowDidResizeNotification
		object:self];
	
	[[NSNotificationCenter defaultCenter] addObserver:self
		selector:@selector(claroMove:) name:NSWindowDidMoveNotification
		object:self];
}
/*
- (BOOL)isFlipped
{
	return YES;
}

- (BOOL)isVertical
{
	return (cw->flags & cSplitterVertical) ? NO : YES;
}
*/
@end

void cgraphics_splitter_widget_create( widget_t *widget )
{
	ClaroSplitter *sp;
	NSView *parent = cgraphics_get_native_parent( widget );
	
	sp = [[ClaroSplitter alloc]
		initWithFrame: NSMakeRect( widget->size_req->x, widget->size_req->y, widget->size_req->w, widget->size_req->h )
		];
	
	[parent addSubview: sp];
	[sp setClaroWidget:widget];
	//[sp setAutoresizesSubviews:YES];
	
	widget->native = (NSControl *)sp;
}

#define WAYOUT (1000000.0)
void cgraphics_splitter_updated( widget_t *widget, int child )
{
	splitter_widget_t *sw = (splitter_widget_t *)widget;
	ClaroSplitter *s = (ClaroSplitter *)widget->native;
	RBSplitSubview *sv = [s subviewAtPosition: child];
	
	[sv setDimension:sw->children[child].size];
	[sv setMinDimension:sw->children[child].size andMaxDimension:sw->children[child].size]; // FIXME: not /really/ right :/
}
